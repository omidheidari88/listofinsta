{"ast":null,"code":"const products = localStorage.getItem('product');\nconst product = JSON.parse(products);\nexport const initialState = {\n  items: []\n};\nexport const reducer = (state, action) => {\n  let result = null;\n\n  switch (action.type) {\n    case 'add':\n      result = addHandler(state, action);\n      break;\n\n    default:\n      getStateFromLocalStorage(state, product);\n      break;\n  }\n\n  console.log(initialState.items);\n  return result;\n};\n\nconst getStateFromLocalStorage = (state, data) => {\n  return { ...state,\n    items: [...state.items, data]\n  };\n};\n\nconst addHandler = (state, action) => {\n  return { ...state,\n    items: [...state.items, action.payload]\n  };\n};","map":{"version":3,"sources":["/Users/omid/Documents/GitHub/listofinsta/loi-front/src/modules/store/reducer.js"],"names":["products","localStorage","getItem","product","JSON","parse","initialState","items","reducer","state","action","result","type","addHandler","getStateFromLocalStorage","console","log","data","payload"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAjB;AACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAhB;AACA,OAAO,MAAMM,YAAY,GAAG;AAACC,EAAAA,KAAK,EAAE;AAAR,CAArB;AACP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,MAAIC,MAAM,GAAG,IAAb;;AAEA,UAAQD,MAAM,CAACE,IAAf;AACC,SAAK,KAAL;AACCD,MAAAA,MAAM,GAAGE,UAAU,CAACJ,KAAD,EAAQC,MAAR,CAAnB;AACA;;AACD;AACCI,MAAAA,wBAAwB,CAACL,KAAD,EAAQN,OAAR,CAAxB;AACA;AANF;;AAQAY,EAAAA,OAAO,CAACC,GAAR,CAAYV,YAAY,CAACC,KAAzB;AACA,SAAOI,MAAP;AACA,CAbM;;AAcP,MAAMG,wBAAwB,GAAG,CAACL,KAAD,EAAQQ,IAAR,KAAiB;AACjD,SAAO,EAAC,GAAGR,KAAJ;AAAWF,IAAAA,KAAK,EAAE,CAAC,GAAGE,KAAK,CAACF,KAAV,EAAiBU,IAAjB;AAAlB,GAAP;AACA,CAFD;;AAGA,MAAMJ,UAAU,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACrC,SAAO,EAAC,GAAGD,KAAJ;AAAWF,IAAAA,KAAK,EAAE,CAAC,GAAGE,KAAK,CAACF,KAAV,EAAiBG,MAAM,CAACQ,OAAxB;AAAlB,GAAP;AACA,CAFD","sourcesContent":["const products = localStorage.getItem('product');\nconst product = JSON.parse(products);\nexport const initialState = {items: []};\nexport const reducer = (state, action) => {\n\tlet result = null;\n\n\tswitch (action.type) {\n\t\tcase 'add':\n\t\t\tresult = addHandler(state, action);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tgetStateFromLocalStorage(state, product);\n\t\t\tbreak;\n\t}\n\tconsole.log(initialState.items);\n\treturn result;\n};\nconst getStateFromLocalStorage = (state, data) => {\n\treturn {...state, items: [...state.items, data]};\n};\nconst addHandler = (state, action) => {\n\treturn {...state, items: [...state.items, action.payload]};\n};\n"]},"metadata":{},"sourceType":"module"}