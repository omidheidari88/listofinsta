{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport Axios from '../../../Ajax/Axios';\nimport { actions } from '../../actions';\nconst axios = new Axios(); //TODO FETCH Worker\n\nfunction* fetchCourseWorker(action) {\n  try {\n    const Courses = yield call(() => axios.get('course/add').then(res => res.data.items));\n    yield put({\n      type: actions.FETCH_COURSE_SUCCESS,\n      payload: {\n        Courses: Courses\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: actions.FETCH_COURSE_FAILED,\n      payload: {\n        messages: error.message\n      }\n    });\n  }\n} //STUB FETCH Watcher\n\n\nexport function* fetchCourseWatcher() {\n  yield takeEvery(actions.FETCH_COURSE, fetchCourseWorker);\n} //TODO update Worker\n\nfunction* updateCourseWorker(action) {\n  try {\n    const response = yield call(() => axios.post('course/edit', action.payload).then(res => res.data));\n    yield put({\n      type: actions.UPDATE_COURSE_SUCCESS,\n      payload: {\n        Course: response.item,\n        messages: response.message,\n        success: response.item.success\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: actions.UPDATE_COURSE_FAILED,\n      payload: {\n        messages: error.message\n      }\n    });\n  }\n} //STUB update Watcher\n\n\nexport function* updateCourseWatcher() {\n  yield takeEvery(actions.UPDATE_COURSE, updateCourseWorker);\n} //TODO DELETE Worker\n\nfunction* deleteCourseWorker(action) {\n  try {\n    const response = yield call(() => axios.post('course/delete', action.payload).then(res => res.data));\n    yield put({\n      type: actions.DELETE_COURSE_SUCCESS,\n      payload: {\n        id: response.item.id\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: actions.DELETE_COURSE_FAILED,\n      payload: {\n        messages: error.message\n      }\n    });\n  }\n} //STUB DELETE Watcher\n\n\nexport function* deleteCourseWatcher() {\n  yield takeEvery(actions.DELETE_COURSE, deleteCourseWorker);\n}","map":{"version":3,"sources":["/Users/omid/Documents/GitHub/listofinsta/loi-front/src/modules/store/saga/courseSaga.js"],"names":["takeEvery","put","call","Axios","actions","axios","fetchCourseWorker","action","Courses","get","then","res","data","items","type","FETCH_COURSE_SUCCESS","payload","error","FETCH_COURSE_FAILED","messages","message","fetchCourseWatcher","FETCH_COURSE","updateCourseWorker","response","post","UPDATE_COURSE_SUCCESS","Course","item","success","UPDATE_COURSE_FAILED","updateCourseWatcher","UPDATE_COURSE","deleteCourseWorker","DELETE_COURSE_SUCCESS","id","DELETE_COURSE_FAILED","deleteCourseWatcher","DELETE_COURSE"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,GAAnB,EAAwBC,IAAxB,QAAmC,oBAAnC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAAQC,OAAR,QAAsB,eAAtB;AACA,MAAMC,KAAK,GAAG,IAAIF,KAAJ,EAAd,C,CAEA;;AACA,UAAUG,iBAAV,CAA4BC,MAA5B,EAAoC;AACnC,MAAI;AACH,UAAMC,OAAO,GAAG,MAAMN,IAAI,CAAC,MAAMG,KAAK,CAACI,GAAN,CAAU,YAAV,EAAwBC,IAAxB,CAA8BC,GAAD,IAASA,GAAG,CAACC,IAAJ,CAASC,KAA/C,CAAP,CAA1B;AACA,UAAMZ,GAAG,CAAC;AAACa,MAAAA,IAAI,EAAEV,OAAO,CAACW,oBAAf;AAAqCC,MAAAA,OAAO,EAAE;AAACR,QAAAA,OAAO,EAAEA;AAAV;AAA9C,KAAD,CAAT;AACA,GAHD,CAGE,OAAOS,KAAP,EAAc;AACf,UAAMhB,GAAG,CAAC;AAACa,MAAAA,IAAI,EAAEV,OAAO,CAACc,mBAAf;AAAoCF,MAAAA,OAAO,EAAE;AAACG,QAAAA,QAAQ,EAAEF,KAAK,CAACG;AAAjB;AAA7C,KAAD,CAAT;AACA;AACD,C,CACD;;;AACA,OAAO,UAAUC,kBAAV,GAA+B;AACrC,QAAMrB,SAAS,CAACI,OAAO,CAACkB,YAAT,EAAuBhB,iBAAvB,CAAf;AACA,C,CAED;;AACA,UAAUiB,kBAAV,CAA6BhB,MAA7B,EAAqC;AACpC,MAAI;AACH,UAAMiB,QAAQ,GAAG,MAAMtB,IAAI,CAAC,MAAMG,KAAK,CAACoB,IAAN,CAAW,aAAX,EAA0BlB,MAAM,CAACS,OAAjC,EAA0CN,IAA1C,CAAgDC,GAAD,IAASA,GAAG,CAACC,IAA5D,CAAP,CAA3B;AACA,UAAMX,GAAG,CAAC;AAACa,MAAAA,IAAI,EAAEV,OAAO,CAACsB,qBAAf;AAAsCV,MAAAA,OAAO,EAAE;AAACW,QAAAA,MAAM,EAAEH,QAAQ,CAACI,IAAlB;AAAwBT,QAAAA,QAAQ,EAAEK,QAAQ,CAACJ,OAA3C;AAAoDS,QAAAA,OAAO,EAAEL,QAAQ,CAACI,IAAT,CAAcC;AAA3E;AAA/C,KAAD,CAAT;AACA,GAHD,CAGE,OAAOZ,KAAP,EAAc;AACf,UAAMhB,GAAG,CAAC;AAACa,MAAAA,IAAI,EAAEV,OAAO,CAAC0B,oBAAf;AAAqCd,MAAAA,OAAO,EAAE;AAACG,QAAAA,QAAQ,EAAEF,KAAK,CAACG;AAAjB;AAA9C,KAAD,CAAT;AACA;AACD,C,CAED;;;AACA,OAAO,UAAUW,mBAAV,GAAgC;AACtC,QAAM/B,SAAS,CAACI,OAAO,CAAC4B,aAAT,EAAwBT,kBAAxB,CAAf;AACA,C,CAED;;AACA,UAAUU,kBAAV,CAA6B1B,MAA7B,EAAqC;AACpC,MAAI;AACH,UAAMiB,QAAQ,GAAG,MAAMtB,IAAI,CAAC,MAAMG,KAAK,CAACoB,IAAN,CAAW,eAAX,EAA4BlB,MAAM,CAACS,OAAnC,EAA4CN,IAA5C,CAAkDC,GAAD,IAASA,GAAG,CAACC,IAA9D,CAAP,CAA3B;AACA,UAAMX,GAAG,CAAC;AAACa,MAAAA,IAAI,EAAEV,OAAO,CAAC8B,qBAAf;AAAsClB,MAAAA,OAAO,EAAE;AAACmB,QAAAA,EAAE,EAAEX,QAAQ,CAACI,IAAT,CAAcO;AAAnB;AAA/C,KAAD,CAAT;AACA,GAHD,CAGE,OAAOlB,KAAP,EAAc;AACf,UAAMhB,GAAG,CAAC;AAACa,MAAAA,IAAI,EAAEV,OAAO,CAACgC,oBAAf;AAAqCpB,MAAAA,OAAO,EAAE;AAACG,QAAAA,QAAQ,EAAEF,KAAK,CAACG;AAAjB;AAA9C,KAAD,CAAT;AACA;AACD,C,CAED;;;AACA,OAAO,UAAUiB,mBAAV,GAAgC;AACtC,QAAMrC,SAAS,CAACI,OAAO,CAACkC,aAAT,EAAwBL,kBAAxB,CAAf;AACA","sourcesContent":["import {takeEvery, put, call} from 'redux-saga/effects';\nimport Axios from '../../../Ajax/Axios';\nimport {actions} from '../../actions';\nconst axios = new Axios();\n\n//TODO FETCH Worker\nfunction* fetchCourseWorker(action) {\n\ttry {\n\t\tconst Courses = yield call(() => axios.get('course/add').then((res) => res.data.items));\n\t\tyield put({type: actions.FETCH_COURSE_SUCCESS, payload: {Courses: Courses}});\n\t} catch (error) {\n\t\tyield put({type: actions.FETCH_COURSE_FAILED, payload: {messages: error.message}});\n\t}\n}\n//STUB FETCH Watcher\nexport function* fetchCourseWatcher() {\n\tyield takeEvery(actions.FETCH_COURSE, fetchCourseWorker);\n}\n\n//TODO update Worker\nfunction* updateCourseWorker(action) {\n\ttry {\n\t\tconst response = yield call(() => axios.post('course/edit', action.payload).then((res) => res.data));\n\t\tyield put({type: actions.UPDATE_COURSE_SUCCESS, payload: {Course: response.item, messages: response.message, success: response.item.success}});\n\t} catch (error) {\n\t\tyield put({type: actions.UPDATE_COURSE_FAILED, payload: {messages: error.message}});\n\t}\n}\n\n//STUB update Watcher\nexport function* updateCourseWatcher() {\n\tyield takeEvery(actions.UPDATE_COURSE, updateCourseWorker);\n}\n\n//TODO DELETE Worker\nfunction* deleteCourseWorker(action) {\n\ttry {\n\t\tconst response = yield call(() => axios.post('course/delete', action.payload).then((res) => res.data));\n\t\tyield put({type: actions.DELETE_COURSE_SUCCESS, payload: {id: response.item.id}});\n\t} catch (error) {\n\t\tyield put({type: actions.DELETE_COURSE_FAILED, payload: {messages: error.message}});\n\t}\n}\n\n//STUB DELETE Watcher\nexport function* deleteCourseWatcher() {\n\tyield takeEvery(actions.DELETE_COURSE, deleteCourseWorker);\n}\n"]},"metadata":{},"sourceType":"module"}