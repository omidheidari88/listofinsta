{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport Axios from '../../../Ajax/Axios';\nimport { actions } from '../../actions';\nconst axios = new Axios(); //TODO FETCH Worker\n\nfunction* fetchProductWorker(action) {\n  try {\n    const products = yield call(() => axios.get('product/add').then(res => res.data.items));\n    yield put({\n      type: actions.FETCH_PRODUCT_SUCCESS,\n      payload: {\n        items: products\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: actions.FETCH_PRODUCT_FAILED,\n      payload: {\n        messages: error.message\n      }\n    });\n  }\n} //STUB FETCH Watcher\n\n\nexport function* fetchProductWatcher() {\n  yield takeEvery(actions.FETCH_PRODUCT, fetchProductWorker);\n} //TODO add Worker\n\nfunction* addProductWorker(action) {\n  try {\n    const products = yield call(() => axios.post('product/add', action.payload).then(res => res.data.items));\n    yield put({\n      type: actions.ADD_PRODUCT_SUCCESS,\n      payload: {\n        items: products\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: actions.ADD_PRODUCT_FAILED,\n      payload: {\n        messages: error.message\n      }\n    });\n  }\n} //STUB add Watcher\n\n\nexport function* addProductWatcher() {\n  yield takeEvery(actions.ADD_PRODUCT, addProductWorker);\n} //TODO update Worker\n\nfunction* updateProductWorker(action) {\n  try {\n    const response = yield call(() => axios.post('product/edit', action.payload).then(res => res.data));\n    yield put({\n      type: actions.UPDATE_PRODUCT_SUCCESS,\n      payload: {\n        Product: response.item,\n        messages: response.message,\n        success: response.item.success\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: actions.UPDATE_PRODUCT_FAILED,\n      payload: {\n        messages: error.message\n      }\n    });\n  }\n} //STUB update Watcher\n\n\nexport function* updateProductWatcher() {\n  yield takeEvery(actions.UPDATE_PRODUCT, updateProductWorker);\n} //TODO DELETE Worker\n\nfunction* deleteProductWorker(action) {\n  try {\n    const response = yield call(() => axios.post('product/delete', action.payload).then(res => res.data));\n    yield put({\n      type: actions.DELETE_PRODUCT_SUCCESS,\n      payload: {\n        id: response.item.id\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: actions.DELETE_PRODUCT_FAILED,\n      payload: {\n        messages: error.message\n      }\n    });\n  }\n} //STUB DELETE Watcher\n\n\nexport function* deleteProductWatcher() {\n  yield takeEvery(actions.DELETE_PRODUCT, deleteProductWorker);\n}","map":{"version":3,"sources":["/Users/omid/Documents/GitHub/listofinsta/loi-front/src/modules/store/saga/productSaga.js"],"names":["takeEvery","put","call","Axios","actions","axios","fetchProductWorker","action","products","get","then","res","data","items","type","FETCH_PRODUCT_SUCCESS","payload","error","FETCH_PRODUCT_FAILED","messages","message","fetchProductWatcher","FETCH_PRODUCT","addProductWorker","post","ADD_PRODUCT_SUCCESS","ADD_PRODUCT_FAILED","addProductWatcher","ADD_PRODUCT","updateProductWorker","response","UPDATE_PRODUCT_SUCCESS","Product","item","success","UPDATE_PRODUCT_FAILED","updateProductWatcher","UPDATE_PRODUCT","deleteProductWorker","DELETE_PRODUCT_SUCCESS","id","DELETE_PRODUCT_FAILED","deleteProductWatcher","DELETE_PRODUCT"],"mappings":"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","sourcesContent":["import {takeEvery, put, call} from 'redux-saga/effects';\nimport Axios from '../../../Ajax/Axios';\nimport {actions} from '../../actions';\nconst axios = new Axios();\n\n//TODO FETCH Worker\nfunction* fetchProductWorker(action) {\n\ttry {\n\t\tconst products = yield call(() => axios.get('product/add').then((res) => res.data.items));\n\t\tyield put({type: actions.FETCH_PRODUCT_SUCCESS, payload: {items: products}});\n\t} catch (error) {\n\t\tyield put({type: actions.FETCH_PRODUCT_FAILED, payload: {messages: error.message}});\n\t}\n}\n//STUB FETCH Watcher\nexport function* fetchProductWatcher() {\n\tyield takeEvery(actions.FETCH_PRODUCT, fetchProductWorker);\n}\n\n//TODO add Worker\nfunction* addProductWorker(action) {\n\ttry {\n\t\tconst products = yield call(() => axios.post('product/add', action.payload).then((res) => res.data.items));\n\t\tyield put({type: actions.ADD_PRODUCT_SUCCESS, payload: {items: products}});\n\t} catch (error) {\n\t\tyield put({type: actions.ADD_PRODUCT_FAILED, payload: {messages: error.message}});\n\t}\n}\n//STUB add Watcher\nexport function* addProductWatcher() {\n\tyield takeEvery(actions.ADD_PRODUCT, addProductWorker);\n}\n\n//TODO update Worker\nfunction* updateProductWorker(action) {\n\ttry {\n\t\tconst response = yield call(() => axios.post('product/edit', action.payload).then((res) => res.data));\n\t\tyield put({type: actions.UPDATE_PRODUCT_SUCCESS, payload: {Product: response.item, messages: response.message, success: response.item.success}});\n\t} catch (error) {\n\t\tyield put({type: actions.UPDATE_PRODUCT_FAILED, payload: {messages: error.message}});\n\t}\n}\n\n//STUB update Watcher\nexport function* updateProductWatcher() {\n\tyield takeEvery(actions.UPDATE_PRODUCT, updateProductWorker);\n}\n\n//TODO DELETE Worker\nfunction* deleteProductWorker(action) {\n\ttry {\n\t\tconst response = yield call(() => axios.post('product/delete', action.payload).then((res) => res.data));\n\t\tyield put({type: actions.DELETE_PRODUCT_SUCCESS, payload: {id: response.item.id}});\n\t} catch (error) {\n\t\tyield put({type: actions.DELETE_PRODUCT_FAILED, payload: {messages: error.message}});\n\t}\n}\n\n//STUB DELETE Watcher\nexport function* deleteProductWatcher() {\n\tyield takeEvery(actions.DELETE_PRODUCT, deleteProductWorker);\n}\n"]},"metadata":{},"sourceType":"module"}