{"ast":null,"code":"import { takeEvery, put, call } from 'redux-saga/effects';\nimport Axios from '../../../Ajax/Axios';\nimport { actions } from '../../actions';\nconst axios = new Axios(); //TODO FETCH Worker\n\nfunction* fetchUserWorker(action) {\n  try {\n    const users = yield call(() => axios.get('user/add').then(res => res.data.items));\n    yield put({\n      type: actions.FETCH_USER_SUCCESS,\n      payload: {\n        users: users,\n        messages: 'sentiment_satisfied_alt'\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: actions.FETCH_USER_FAILED,\n      payload: {\n        messages: error.message\n      }\n    });\n  }\n} //STUB FETCH Watcher\n\n\nexport function* fetchUserWatcher() {\n  yield takeEvery(actions.FETCH_USER, fetchUserWorker);\n} //TODO REGISTER Worker\n\nfunction* registerUserWorker(action) {\n  const response = yield call(() => axios.post('auth/register', action.payload).then(res => res.data));\n\n  try {\n    yield put({\n      type: actions.REGISTER_USER_SUCCESS,\n      payload: {\n        user: response.item,\n        messages: response.message\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: actions.REGISTER_USER_FAILED,\n      payload: {\n        messages: response.message\n      }\n    });\n  }\n} //STUB REGISTER Watcher\n\n\nexport function* registerUserWatcher() {\n  yield takeEvery(actions.REGISTER_USER, registerUserWorker);\n} //TODO update Worker\n\nfunction* updateUserWorker(action) {\n  try {\n    const response = yield call(() => axios.post('user/edit', action.payload).then(res => res.data));\n    yield put({\n      type: actions.UPDATE_USER_SUCCESS,\n      payload: {\n        user: response.item,\n        messages: response.message,\n        success: response.item.success\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: actions.UPDATE_USER_FAILED,\n      payload: {\n        messages: error.message\n      }\n    });\n  }\n} //STUB update Watcher\n\n\nexport function* updateUserWatcher() {\n  yield takeEvery(actions.UPDATE_USER, updateUserWorker);\n} //TODO DELETE Worker\n\nfunction* deleteUserWorker(action) {\n  try {\n    const response = yield call(() => axios.post('user/delete', action.payload).then(res => res.data));\n    yield put({\n      type: actions.DELETE_USER_SUCCESS,\n      payload: {\n        id: response.item.id\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: actions.DELETE_USER_FAILED,\n      payload: {\n        messages: error.message\n      }\n    });\n  }\n} //STUB DELETE Watcher\n\n\nexport function* deleteUserWatcher() {\n  yield takeEvery(actions.DELETE_USER, deleteUserWorker);\n}","map":{"version":3,"sources":["/Users/omid/Documents/GitHub/listofinsta/loi-front/src/modules/store/saga/saga.js"],"names":["takeEvery","put","call","Axios","actions","axios","fetchUserWorker","action","users","get","then","res","data","items","type","FETCH_USER_SUCCESS","payload","messages","error","FETCH_USER_FAILED","message","fetchUserWatcher","FETCH_USER","registerUserWorker","response","post","REGISTER_USER_SUCCESS","user","item","REGISTER_USER_FAILED","registerUserWatcher","REGISTER_USER","updateUserWorker","UPDATE_USER_SUCCESS","success","UPDATE_USER_FAILED","updateUserWatcher","UPDATE_USER","deleteUserWorker","DELETE_USER_SUCCESS","id","DELETE_USER_FAILED","deleteUserWatcher","DELETE_USER"],"mappings":"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","sourcesContent":["import {takeEvery, put, call} from 'redux-saga/effects';\nimport Axios from '../../../Ajax/Axios';\nimport {actions} from '../../actions';\nconst axios = new Axios();\n\n//TODO FETCH Worker\nfunction* fetchUserWorker(action) {\n\ttry {\n\t\tconst users = yield call(() => axios.get('user/add').then((res) => res.data.items));\n\t\tyield put({type: actions.FETCH_USER_SUCCESS, payload: {users: users, messages: 'sentiment_satisfied_alt'}});\n\t} catch (error) {\n\t\tyield put({type: actions.FETCH_USER_FAILED, payload: {messages: error.message}});\n\t}\n}\n//STUB FETCH Watcher\nexport function* fetchUserWatcher() {\n\tyield takeEvery(actions.FETCH_USER, fetchUserWorker);\n}\n\n//TODO REGISTER Worker\nfunction* registerUserWorker(action) {\n\tconst response = yield call(() => axios.post('auth/register', action.payload).then((res) => res.data));\n\ttry {\n\t\tyield put({type: actions.REGISTER_USER_SUCCESS, payload: {user: response.item, messages: response.message}});\n\t} catch (error) {\n\t\tyield put({type: actions.REGISTER_USER_FAILED, payload: {messages: response.message}});\n\t}\n}\n\n//STUB REGISTER Watcher\nexport function* registerUserWatcher() {\n\tyield takeEvery(actions.REGISTER_USER, registerUserWorker);\n}\n\n//TODO update Worker\nfunction* updateUserWorker(action) {\n\ttry {\n\t\tconst response = yield call(() => axios.post('user/edit', action.payload).then((res) => res.data));\n\t\tyield put({type: actions.UPDATE_USER_SUCCESS, payload: {user: response.item, messages: response.message, success: response.item.success}});\n\t} catch (error) {\n\t\tyield put({type: actions.UPDATE_USER_FAILED, payload: {messages: error.message}});\n\t}\n}\n\n//STUB update Watcher\nexport function* updateUserWatcher() {\n\tyield takeEvery(actions.UPDATE_USER, updateUserWorker);\n}\n\n//TODO DELETE Worker\nfunction* deleteUserWorker(action) {\n\ttry {\n\t\tconst response = yield call(() => axios.post('user/delete', action.payload).then((res) => res.data));\n\t\tyield put({type: actions.DELETE_USER_SUCCESS, payload: {id: response.item.id}});\n\t} catch (error) {\n\t\tyield put({type: actions.DELETE_USER_FAILED, payload: {messages: error.message}});\n\t}\n}\n\n//STUB DELETE Watcher\nexport function* deleteUserWatcher() {\n\tyield takeEvery(actions.DELETE_USER, deleteUserWorker);\n}\n"]},"metadata":{},"sourceType":"module"}