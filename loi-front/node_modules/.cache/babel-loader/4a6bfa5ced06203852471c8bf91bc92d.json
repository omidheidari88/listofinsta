{"ast":null,"code":"import { actions } from '../actions';\nexport const initialState = {\n  items: []\n};\nexport const reducer = (state = initialState, action) => {\n  let result = state;\n\n  switch (action.type) {\n    // case actions.FETCH_USER:\n    // \tresult = {...state, items: [...state.items, ...action.payload]};\n    // \tbreak;\n    case actions.FETCH_USER_SUCCESS:\n      result = { ...state,\n        items: action.payload\n      };\n      break;\n\n    case actions.FETCH_USER_FAILED:\n      result = { ...state,\n        items: [...state.items, action.payload.messages]\n      };\n      break;\n\n    default:\n      result = state;\n      break;\n  }\n\n  return result;\n}; //NOTE multi state & multi reducer\n// export const initialState = {\n// \tusers: {items: []},\n// \tproducts: {items: []},\n// \tcourses: {items: []},\n// };\n// export const reducer = ({users, products, courses}, action) => {\n// \treturn {\n// \t\tusers: userReducer(users, action),\n// \t\tproducts: productReducer(products, action),\n// \t\tcourses: courseReducer(courses, action),\n// \t};\n// };","map":{"version":3,"sources":["/Users/omid/Documents/GitHub/listofinsta/loi-front/src/modules/store/reducer.js"],"names":["actions","initialState","items","reducer","state","action","result","type","FETCH_USER_SUCCESS","payload","FETCH_USER_FAILED","messages"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAACC,EAAAA,KAAK,EAAE;AAAR,CAArB;AACP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACxD,MAAIC,MAAM,GAAGF,KAAb;;AAEA,UAAQC,MAAM,CAACE,IAAf;AACC;AACA;AACA;AACA,SAAKP,OAAO,CAACQ,kBAAb;AACCF,MAAAA,MAAM,GAAG,EAAC,GAAGF,KAAJ;AAAWF,QAAAA,KAAK,EAAEG,MAAM,CAACI;AAAzB,OAAT;AACA;;AACD,SAAKT,OAAO,CAACU,iBAAb;AACCJ,MAAAA,MAAM,GAAG,EAAC,GAAGF,KAAJ;AAAWF,QAAAA,KAAK,EAAE,CAAC,GAAGE,KAAK,CAACF,KAAV,EAAiBG,MAAM,CAACI,OAAP,CAAeE,QAAhC;AAAlB,OAAT;AACA;;AACD;AACCL,MAAAA,MAAM,GAAGF,KAAT;AACA;AAZF;;AAcA,SAAOE,MAAP;AACA,CAlBM,C,CAoBP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {actions} from '../actions';\n\nexport const initialState = {items: []};\nexport const reducer = (state = initialState, action) => {\n\tlet result = state;\n\n\tswitch (action.type) {\n\t\t// case actions.FETCH_USER:\n\t\t// \tresult = {...state, items: [...state.items, ...action.payload]};\n\t\t// \tbreak;\n\t\tcase actions.FETCH_USER_SUCCESS:\n\t\t\tresult = {...state, items: action.payload};\n\t\t\tbreak;\n\t\tcase actions.FETCH_USER_FAILED:\n\t\t\tresult = {...state, items: [...state.items, action.payload.messages]};\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tresult = state;\n\t\t\tbreak;\n\t}\n\treturn result;\n};\n\n//NOTE multi state & multi reducer\n// export const initialState = {\n// \tusers: {items: []},\n// \tproducts: {items: []},\n// \tcourses: {items: []},\n// };\n\n// export const reducer = ({users, products, courses}, action) => {\n// \treturn {\n// \t\tusers: userReducer(users, action),\n// \t\tproducts: productReducer(products, action),\n// \t\tcourses: courseReducer(courses, action),\n// \t};\n// };\n"]},"metadata":{},"sourceType":"module"}